(impose-calling-conventions
`
    (letrec () (locals () 7))

)


(if (begin
          (set! r.11 (begin (set! r.5 (* 2 4)) (+ 7 r.5)))
          (set! r.10
            (begin
              (set! r.9
                (begin
                  (set! r.8 (+ 1 1))
                  (set! r.7 (begin (set! r.6 (+ 1 1)) (+ r.6 1)))
                  (+ r.8 r.7)))
              (- 20 r.9)))
          (= r.11 r.10))

        
        0)









(generate-x86-64
)



(assign-registers
`(letrec ([f$1 (lambda ()
                (locals (x.1 z.3)
                  (ulocals (t.4 t.5)
                    (locate ([y.2 fv0])
                      (frame-conflict ([x.1 y.2] [y.2 x.1] [z.3])
                        (register-conflict ([x.1 r14 r13 r12 r11 r10 r9 r8
                                             rsi rdi rbp rbx rdx rcx r15]
                                            [z.3]
                                            [t.4 r14 r13 r12 r11 r10 r9 r8
                                             rsi rdi rbp rbx rdx rcx r15
                                             t.5]
                                            [t.5 r14 r13 r12 r11 r10 r9 r8
                                             rsi rdi rbp rbx rdx rcx r15
                                             t.4])
                          (begin
                            (set! x.1 1)
                            (set! fv0 2)
                            (set! t.4 x.1)
                            (set! t.5 fv0)
                            (set! t.4 (+ t.4 t.5))
                            (set! rax t.4)
                            (r15 rax rcx rdx rbx rbp rdi rsi r8 r9 r10 r11
                                 r12 r13 r14))))))))])))

















(select-instructions
`(letrec ([square$1 (lambda ()
                     (locals ()
                       (ulocals ()
                         (locate ()
                           (frame-conflict ()
                             (begin
                               (set! fv0 (* fv0 fv0))
                               (set! rax fv0)
                               (fv1 rbp rax)))))))])
  (locals ()
    (ulocals ()
      (locate ()
        (frame-conflict ()
          (r15))))))
)


(select-effect
`(set! fv0 (* fv0 3))
)


(begin
                               
                               (set! rax fv0)
                               (fv1 rbp rax))























(uncover-frame-conflict
`(letrec ([square$1 (lambda ()
                        (locals ()
                          (begin
                            (set! fv0 (* fv0 fv0))
                            (set! rax fv0)
                            (fv1 rbp rax))))])
     (locals ()
       (begin
         (set! fv0 10)
         (set! fv1 r15)
         (square$1 rax rbp fv0 fv1)))))

(introduce-allocation-forms 
`(letrec ([square$1 (lambda ()
                     (locals ()
                       (frame-conflict ()
                         (begin
                           (set! fv0 (* fv0 fv0))
                           (set! rax fv0)
                           (fv1 rbp rax)))))])
  (locals ()
    (frame-conflict ()
      (begin
        (set! fv0 10)
        (set! fv1 r15)
        (square$1 rax rbp fv0 fv1))))))

                    (newline)
                    (newline)
                    (display cg)
                    (newline)
                    (newline)

(letrec ()
  (locals ()
    (register-conflict () (begin (set! rax 5) (r15 rax)))))

(letrec () (locals () (begin (set! rax 5) (r15 rax))))

(assign-registers
`(letrec ()
  (locals (x.1)
    (register-conflict ([x.1 r15])
      (begin
        (set! rax 10)
        (set! x.1 rax)
        (set! rax (- rax x.1))
        (r15 rax))))))

(remove-node
`((a.1 e.5 c.3) (b.2 e.5 rax) (c.3 a.1 e.5) (d.4 rbx rdx) (e.5 r8 b.2 r9 r10 r11 a.1 c.3)) `e.5
)

(find-ban-list
`(a.1 b.2 c.3 rax r11)
`((a.1 r8) (b.2 rax) (c.3 r10) (d.4 r12))
)